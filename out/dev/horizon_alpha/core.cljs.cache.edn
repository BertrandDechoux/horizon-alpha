;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name horizon-alpha.core, :imports nil, :requires {horizon-alpha.field.grid horizon-alpha.field.grid, dom om.dom, horizon-alpha.view.svg horizon-alpha.view.svg, om.dom om.dom, horizon-alpha.model.game horizon-alpha.model.game, game horizon-alpha.model.game, grid horizon-alpha.field.grid, horizon-alpha.player.player horizon-alpha.player.player, horizon-alpha.view.player horizon-alpha.view.player, horizon-alpha.utils horizon-alpha.utils, om.core om.core, om om.core, horizon-alpha.i18n horizon-alpha.i18n, clojure.string clojure.string, horizon-alpha.model.state horizon-alpha.model.state, svg horizon-alpha.view.svg, player horizon-alpha.view.player}, :uses {pcs horizon-alpha.player.player, i18n horizon-alpha.i18n, gen-state horizon-alpha.model.state, user-agent horizon-alpha.utils, npcs horizon-alpha.player.player, lower-case clojure.string, lang horizon-alpha.utils, app-element horizon-alpha.utils}, :defs {t {:name horizon-alpha.core/t, :file "src/horizon_alpha/core.cljs", :line 16, :column 1, :end-line 16, :end-column 7, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/core.cljs", :line 16, :column 6, :end-line 16, :end-column 7}}, app-view {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/core.cljs", :line 37, :column 17, :end-line 37, :end-column 25, :arglists (quote ([app owner]))}, :name horizon-alpha.core/app-view, :variadic false, :file "src/horizon_alpha/core.cljs", :end-column 25, :method-params ([app owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app owner]))}, cell-radius {:name horizon-alpha.core/cell-radius, :file "src/horizon_alpha/core.cljs", :line 26, :column 11, :end-line 26, :end-column 27, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/core.cljs", :line 26, :column 16, :end-line 26, :end-column 27}}, field-cell {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/core.cljs", :line 29, :column 17, :end-line 29, :end-column 27, :arglists (quote ([[[pos terrain] is-loot]]))}, :name horizon-alpha.core/field-cell, :variadic false, :file "src/horizon_alpha/core.cljs", :end-column 27, :method-params ([p__16297]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[[pos terrain] is-loot]]))}, t_horizon_alpha$core16305 {:num-fields 5, :protocols #{om.core/IRenderState cljs.core/IMeta cljs.core/IWithMeta}, :name horizon-alpha.core/t_horizon_alpha$core16305, :file "src/horizon_alpha/core.cljs", :type true, :anonymous true, :column 13, :line 38, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, interpolate {:name horizon-alpha.core/interpolate, :file "src/horizon_alpha/core.cljs", :line 27, :column 11, :end-line 27, :end-column 27, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/core.cljs", :line 27, :column 16, :end-line 27, :end-column 27}}, ->t_horizon_alpha$core16305 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRenderState cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([options app-view app owner meta16306])), :file nil}, :protocols #{om.core/IRenderState cljs.core/IMeta cljs.core/IWithMeta}, :name horizon-alpha.core/->t_horizon_alpha$core16305, :variadic false, :file "src/horizon_alpha/core.cljs", :method-params ([options app-view app owner meta16306]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 13, :factory :positional, :line 38, :max-fixed-arity 5, :fn-var true, :arglists (quote ([options app-view app owner meta16306])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_horizon_alpha$core16302 {:num-fields 5, :protocols #{om.core/IRenderState cljs.core/IMeta cljs.core/IWithMeta}, :name horizon-alpha.core/t_horizon_alpha$core16302, :file "src/horizon_alpha/core.cljs", :type true, :anonymous true, :column 13, :line 38, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, app-state {:name horizon-alpha.core/app-state, :file "src/horizon_alpha/core.cljs", :line 25, :column 11, :end-line 25, :end-column 25, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/core.cljs", :line 25, :column 16, :end-line 25, :end-column 25}}, ->t_horizon_alpha$core16302 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRenderState cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([options app-view app owner meta16303])), :file nil}, :protocols #{om.core/IRenderState cljs.core/IMeta cljs.core/IWithMeta}, :name horizon-alpha.core/->t_horizon_alpha$core16302, :variadic false, :file "src/horizon_alpha/core.cljs", :method-params ([options app-view app owner meta16303]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 13, :factory :positional, :line 38, :max-fixed-arity 5, :fn-var true, :arglists (quote ([options app-view app owner meta16303])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{options :setup/chrome-required app-view owner meta16306 :app/npcs :fill :app/loot meta16303 :app/guide :field :loots :targets :players :app/help :target quote :arglists app}, :order [:setup/chrome-required :target :app/loot :fill :app/guide :app/help :app/npcs :players :loots :field :targets options app-view :arglists quote app owner meta16303 meta16306]}, :doc nil}