;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name horizon-alpha.utils, :imports nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async}, :defs {app-element {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([id]))}, :name horizon-alpha.utils/app-element, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 18, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, lang {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([]))}, :name horizon-alpha.utils/lang, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, user-agent {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([]))}, :name horizon-alpha.utils/user-agent, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, later {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([f msecs]))}, :name horizon-alpha.utils/later, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 12, :method-params ([f msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f msecs]))}, do-while-clock {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 24, :column 7, :end-line 24, :end-column 21, :arglists (quote ([step-f continue-f end-f msecs]))}, :name horizon-alpha.utils/do-while-clock, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 21, :method-params ([step-f continue-f end-f msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 4, :fn-var true, :arglists (quote ([step-f continue-f end-f msecs]))}, to-js {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 32, :column 7, :end-line 32, :end-column 12, :arglists (quote ([m]))}, :name horizon-alpha.utils/to-js, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 12, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, pow2 {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 36, :column 7, :end-line 36, :end-column 11, :arglists (quote ([n]))}, :name horizon-alpha.utils/pow2, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, and? {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/utils.cljs", :line 40, :column 7, :end-line 40, :end-column 11, :arglists (quote ([p1 p2]))}, :name horizon-alpha.utils/and?, :variadic false, :file "src/horizon_alpha/utils.cljs", :end-column 11, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :target}, :order [:target :recur :else]}, :doc "Various utilities for clojure, clojureScript or OM."}