;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name horizon-alpha.model.path, :imports nil, :requires {grid horizon-alpha.field.grid, horizon-alpha.field.grid horizon-alpha.field.grid, f horizon-alpha.field.field, horizon-alpha.field.field horizon-alpha.field.field, p horizon-alpha.player.player, horizon-alpha.player.player horizon-alpha.player.player, clojure.set clojure.set}, :uses {intersection clojure.set, difference clojure.set}, :defs {walkable-neighbors {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/path.cljs", :line 8, :column 7, :end-line 8, :end-column 25, :arglists (quote ([pos state]))}, :name horizon-alpha.model.path/walkable-neighbors, :variadic false, :file "src/horizon_alpha/model/path.cljs", :end-column 25, :method-params ([pos state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pos state]))}, fiend-neighbors {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/path.cljs", :line 15, :column 7, :end-line 15, :end-column 22, :arglists (quote ([player state]))}, :name horizon-alpha.model.path/fiend-neighbors, :variadic false, :file "src/horizon_alpha/model/path.cljs", :end-column 22, :method-params ([player state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([player state]))}, walk {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/path.cljs", :line 25, :column 8, :end-line 25, :end-column 12, :private true, :arglists (quote ([done pred?]))}, :private true, :name horizon-alpha.model.path/walk, :variadic false, :file "src/horizon_alpha/model/path.cljs", :end-column 12, :method-params ([done pred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([done pred?]))}, step {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/path.cljs", :line 29, :column 8, :end-line 29, :end-column 12, :private true, :arglists (quote ([paths done pred? targets]))}, :private true, :name horizon-alpha.model.path/step, :variadic false, :file "src/horizon_alpha/model/path.cljs", :end-column 12, :method-params ([paths done pred? targets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 4, :fn-var true, :arglists (quote ([paths done pred? targets]))}, short-paths {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/path.cljs", :line 36, :column 7, :end-line 36, :end-column 18, :arglists (quote ([pos state pred? targets]))}, :name horizon-alpha.model.path/short-paths, :variadic false, :file "src/horizon_alpha/model/path.cljs", :end-column 18, :method-params ([pos state pred? targets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pos state pred? targets]))}, best-moves {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/path.cljs", :line 44, :column 7, :end-line 44, :end-column 17, :arglists (quote ([paths targets]))}, :name horizon-alpha.model.path/best-moves, :variadic false, :file "src/horizon_alpha/model/path.cljs", :end-column 17, :method-params ([paths targets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([paths targets]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:pos :field :type :occupied :players}, :order [:occupied :field :pos :players :type]}, :doc "Logic for actions in the field."}