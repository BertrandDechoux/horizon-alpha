;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name horizon-alpha.model.action, :imports nil, :requires {horizon-alpha.player.stat horizon-alpha.player.stat, attack horizon-alpha.model.attack, p horizon-alpha.player.player, horizon-alpha.model.attack horizon-alpha.model.attack, clojure.set clojure.set, horizon-alpha.player.player horizon-alpha.player.player, horizon-alpha.model.heal horizon-alpha.model.heal, s horizon-alpha.player.stat, horizon-alpha.field.field horizon-alpha.field.field, heal horizon-alpha.model.heal, f horizon-alpha.field.field}, :uses {difference clojure.set}, :defs {move {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/action.cljs", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([state pos]))}, :name horizon-alpha.model.action/move, :variadic false, :file "src/horizon_alpha/model/action.cljs", :end-column 11, :method-params ([state pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state pos]))}, unleash {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/action.cljs", :line 18, :column 7, :end-line 18, :end-column 14, :arglists (quote ([state pos]))}, :name horizon-alpha.model.action/unleash, :variadic false, :file "src/horizon_alpha/model/action.cljs", :end-column 14, :method-params ([state pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state pos]))}, charge {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/action.cljs", :line 31, :column 7, :end-line 31, :end-column 13, :arglists (quote ([state pos]))}, :name horizon-alpha.model.action/charge, :variadic false, :file "src/horizon_alpha/model/action.cljs", :end-column 13, :method-params ([state pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state pos]))}, execute-action {:name horizon-alpha.model.action/execute-action, :file "src/horizon_alpha/model/action.cljs", :line 36, :column 1, :end-line 36, :end-column 25, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/action.cljs", :line 36, :column 11, :end-line 36, :end-column 25}}, handle-action {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/model/action.cljs", :line 48, :column 7, :end-line 48, :end-column 20, :arglists (quote ([state target]))}, :name horizon-alpha.model.action/handle-action, :variadic false, :file "src/horizon_alpha/model/action.cljs", :end-column 20, :method-params ([state target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state target]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:artheon :block :boast :omegazell :sp :default :unleash :loot :gaea :move :pos :loots :charge :occupied :active :id :current :players :heal :action :hp :beam :hierarchy :attack}, :order [:players :active :id :pos :loots :artheon :gaea :sp :omegazell :occupied :current :hp :hierarchy :action :default :move :loot :attack :unleash :heal :beam :charge :block :boast]}, :doc "Action for any players."}