;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name horizon-alpha.field.field, :imports nil, :requires {t horizon-alpha.field.terrain, horizon-alpha.field.terrain horizon-alpha.field.terrain, grid horizon-alpha.field.grid, horizon-alpha.field.grid horizon-alpha.field.grid}, :uses nil, :defs {field-length {:name horizon-alpha.field.field/field-length, :file "src/horizon_alpha/field/field.cljs", :line 6, :column 1, :end-line 6, :end-column 28, :private true, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/field/field.cljs", :line 6, :column 16, :end-line 6, :end-column 28, :private true}, :doc "Number of cells horizontally and vertically."}, gen-field {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/field/field.cljs", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([]))}, :name horizon-alpha.field.field/gen-field, :variadic false, :file "src/horizon_alpha/field/field.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, edge? {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/field/field.cljs", :line 14, :column 7, :end-line 14, :end-column 12, :arglists (quote ([[{:keys [x y]} _]]))}, :name horizon-alpha.field.field/edge?, :variadic false, :file "src/horizon_alpha/field/field.cljs", :end-column 12, :method-params ([p__9767]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{:keys [x y]} _]]))}, inside? {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/field/field.cljs", :line 19, :column 7, :end-line 19, :end-column 14, :arglists (quote ([[{:keys [x y]} _]]))}, :name horizon-alpha.field.field/inside?, :variadic false, :file "src/horizon_alpha/field/field.cljs", :end-column 14, :method-params ([p__9774]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{:keys [x y]} _]]))}, walkable? {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/field/field.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([[_ terrain]]))}, :name horizon-alpha.field.field/walkable?, :variadic false, :file "src/horizon_alpha/field/field.cljs", :end-column 16, :method-params ([p__9781]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[_ terrain]]))}, positions {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/src/horizon_alpha/field/field.cljs", :line 30, :column 7, :end-line 30, :end-column 16, :arglists (quote ([field]))}, :name horizon-alpha.field.field/positions, :variadic false, :file "src/horizon_alpha/field/field.cljs", :end-column 16, :method-params ([field]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([field]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :x}, :order [:x :y]}, :doc "A grid with properties."}