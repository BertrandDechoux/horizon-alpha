;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{reduce take map into partition merge partition-by}, :name cljs.core.async, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :uses nil, :defs {Pub {:meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 583, :column 14, :end-line 583, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}}, :protocol-symbol true, :name cljs.core.async/Pub, :file "out/dev/cljs/core/async.cljs", :end-column 17, :column 1, :line 583, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 583, :impls #{cljs.core.async/t_cljs$core$async20129}, :doc nil, :jsdoc ("@interface")}, t_cljs$core$async18669 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18669, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 131, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reduce {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 364, :column 7, :end-line 364, :end-column 13, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, :name cljs.core.async/reduce, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 13, :method-params ([f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, remove> {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 254, :column 7, :end-line 254, :end-column 14, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel."}, :name cljs.core.async/remove>, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel."}, timeout {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 53, :column 7, :end-line 53, :end-column 14, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, :name cljs.core.async/timeout, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, unsub* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 585, :column 4, :end-line 585, :end-column 10, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p v ch]))}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :method-params ([p v ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 585, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch])), :doc nil}, admix* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 475, :column 4, :end-line 475, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 475, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, unmix* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 476, :column 4, :end-line 476, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 476, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, ->t_cljs$core$async18701 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map> f ch meta18702])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18701, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([map> f ch meta18702]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 223, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map> f ch meta18702])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 288, :column 8, :end-line 288, :end-column 15, :private true, :arglists (quote ([f in out]))}, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 15, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out]))}, mix {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 481, :column 7, :end-line 481, :end-column 10, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, :name cljs.core.async/mix, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 481, :end-line 481, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, pub {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 588, :column 7, :end-line 588, :end-column 10, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}}, :name cljs.core.async/pub, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 588, :end-line 588, :max-fixed-arity 3, :fn-var true, :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source."}, take {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 728, :column 7, :end-line 728, :end-column 11, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/take, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 728, :end-line 728, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}, unsub-all* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 586, :column 4, :end-line 586, :end-column 14, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p] [p v])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :method-params ([p] [p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 586, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p v]), :doc nil}, t_cljs$core$async20129 {:num-fields 6, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async20129, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 617, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, <! {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 58, :column 7, :end-line 58, :end-column 9, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available."}, :name cljs.core.async/<!, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 9, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available."}, ->t_cljs$core$async18663 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-flag flag meta18664])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18663, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([alt-flag flag meta18664]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([alt-flag flag meta18664])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 666, :column 7, :end-line 666, :end-column 10, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/map, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 666, :end-line 666, :max-fixed-arity 3, :fn-var true, :arglists ([f chs] [f chs buf-or-n]), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied"}, Mux {:meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 404, :column 14, :end-line 404, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {muxch* [[_]]}}}, :protocol-symbol true, :name cljs.core.async/Mux, :file "out/dev/cljs/core/async.cljs", :end-column 17, :column 1, :line 404, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 404, :impls #{cljs.core.async/t_cljs$core$async19920 cljs.core.async/t_cljs$core$async19259 cljs.core.async/t_cljs$core$async19482 cljs.core.async/t_cljs$core$async19767 cljs.core.async/t_cljs$core$async20129}, :doc nil, :jsdoc ("@interface")}, t_cljs$core$async19259 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async19259, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 426, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat> {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 313, :column 7, :end-line 313, :end-column 14, :arglists (quote ([f out] [f out buf-or-n])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/mapcat>, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 3, :fn-var true, :arglists ([f out] [f out buf-or-n]), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes."}, ->t_cljs$core$async18666 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-flag flag meta18667])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18666, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([alt-flag flag meta18667]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([alt-flag flag meta18667])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async18695 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18695, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async18698 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18698, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 223, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, buffer {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 17, :column 7, :end-line 17, :end-column 13, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, :name cljs.core.async/buffer, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, close! {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 102, :column 7, :end-line 102, :end-column 13, :arglists (quote ([port]))}, :name cljs.core.async/close!, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 13, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port]))}, t_cljs$core$async18632 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18632, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async19482 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async19482, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 426, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async18692 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18692, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 197, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async18707 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18707, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async18632 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([fn-handler f meta18633])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18632, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([fn-handler f meta18633]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fn-handler f meta18633])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async19767 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async19767, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 526, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, chan {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 41, :column 7, :end-line 41, :end-column 11, :arglists (quote ([] [buf-or-n])), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [buf-or-n]), :arglists ([] [buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/chan, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [buf-or-n]), :arglists ([] [buf-or-n]), :arglists-meta (nil nil)}, :method-params ([] [buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([] [buf-or-n]), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size."}, solo-mode* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 479, :column 4, :end-line 479, :end-column 14, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m mode]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([m mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode])), :doc nil}, tap {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 457, :column 7, :end-line 457, :end-column 10, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/tap, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 3, :fn-var true, :arglists ([mult ch] [mult ch close?]), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, admix {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 550, :column 7, :end-line 550, :end-column 12, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, :name cljs.core.async/admix, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 550, :end-line 550, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, unique {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 747, :column 7, :end-line 747, :end-column 13, :arglists (quote ([ch] [ch buf-or-n])), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/unique, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 747, :end-line 747, :max-fixed-arity 2, :fn-var true, :arglists ([ch] [ch buf-or-n]), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}, muxch* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 405, :column 4, :end-line 405, :end-column 10, :protocol cljs.core.async/Mux, :doc nil, :arglists (quote ([_]))}, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, solo-mode {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 577, :column 7, :end-line 577, :end-column 16, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, :name cljs.core.async/solo-mode, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :method-params ([mix mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 577, :end-line 577, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, t_cljs$core$async18663 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18663, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 123, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, onto-chan {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 378, :column 7, :end-line 378, :end-column 16, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/onto-chan, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 3, :fn-var true, :arglists ([ch coll] [ch coll close?]), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied."}, ->t_cljs$core$async18698 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map> f ch meta18699])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18698, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([map> f ch meta18699]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 223, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map> f ch meta18699])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, to-chan {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 395, :column 7, :end-line 395, :end-column 14, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, :name cljs.core.async/to-chan, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 395, :end-line 395, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, dropping-buffer {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 22, :column 7, :end-line 22, :end-column 22, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, :name cljs.core.async/dropping-buffer, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, untap-all {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 470, :column 7, :end-line 470, :end-column 16, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, :name cljs.core.async/untap-all, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, ->t_cljs$core$async18629 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([fn-handler f meta18630])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18629, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([fn-handler f meta18630]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fn-handler f meta18630])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, into {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 720, :column 7, :end-line 720, :end-column 11, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, :name cljs.core.async/into, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :method-params ([coll ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 720, :end-line 720, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, ->t_cljs$core$async19767 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta19768])), :file nil}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async19767, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta19768]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 526, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta19768])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async18692 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta18693])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18692, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([map< f ch meta18693]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map< f ch meta18693])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async18689 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta18687 _ fn1 meta18690])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18689, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([map< f ch meta18687 _ fn1 meta18690]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 205, :max-fixed-arity 7, :fn-var true, :arglists (quote ([map< f ch meta18687 _ fn1 meta18690])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async18689 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18689, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 645, :column 7, :end-line 645, :end-column 10, :arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/sub, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}, :method-params ([p topic ch] [p topic ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 4, :fn-var true, :arglists ([p topic ch] [p topic ch close?]), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, alt-flag {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 121, :column 8, :end-line 121, :end-column 16, :private true, :arglists (quote ([]))}, :private true, :name cljs.core.async/alt-flag, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, map> {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 219, :column 7, :end-line 219, :end-column 11, :arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel."}, :name cljs.core.async/map>, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel."}, ->t_cljs$core$async18704 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([filter> p ch meta18705])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18704, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([filter> p ch meta18705]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 241, :max-fixed-arity 4, :fn-var true, :arglists (quote ([filter> p ch meta18705])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipe {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 328, :column 7, :end-line 328, :end-column 11, :arglists (quote ([from to] [from to close?])), :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the\n  from channel closes, but can be determined by the close?\n  parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([from to] [from to close?]), :arglists ([from to] [from to close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/pipe, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([from to] [from to close?]), :arglists ([from to] [from to close?]), :arglists-meta (nil nil)}, :method-params ([from to] [from to close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists ([from to] [from to close?]), :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the\n  from channel closes, but can be determined by the close?\n  parameter."}, t_cljs$core$async18666 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18666, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 123, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async18672 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18672, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 131, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unmix {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 555, :column 7, :end-line 555, :end-column 12, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix"}, :name cljs.core.async/unmix, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 555, :end-line 555, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix"}, t_cljs$core$async18701 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18701, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 223, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, filter< {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 261, :column 7, :end-line 261, :end-column 14, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/filter<, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 3, :fn-var true, :arglists ([p ch] [p ch buf-or-n]), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes."}, sub* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 584, :column 4, :end-line 584, :end-column 8, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p v ch close?]))}, :protocol cljs.core.async/Pub, :name cljs.core.async/sub*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 8, :method-params ([p v ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 584, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p v ch close?])), :doc nil}, t_cljs$core$async18704 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18704, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, remove< {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 279, :column 7, :end-line 279, :end-column 14, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/remove<, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 3, :fn-var true, :arglists ([p ch] [p ch buf-or-n]), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes."}, untap* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 409, :column 4, :end-line 409, :end-column 10, :protocol cljs.core.async/Mult, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 409, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, toggle {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 565, :column 7, :end-line 565, :end-column 13, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state."}, :name cljs.core.async/toggle, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 13, :method-params ([mix state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 565, :end-line 565, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state."}, ->t_cljs$core$async18669 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-handler flag cb meta18670])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18669, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([alt-handler flag cb meta18670]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 131, :max-fixed-arity 4, :fn-var true, :arglists (quote ([alt-handler flag cb meta18670])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, untap-all* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 410, :column 4, :end-line 410, :end-column 14, :protocol cljs.core.async/Mult, :doc nil, :arglists (quote ([m]))}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap-all*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil}, sliding-buffer {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 28, :column 7, :end-line 28, :end-column 21, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred)."}, :name cljs.core.async/sliding-buffer, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred)."}, partition {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 767, :column 7, :end-line 767, :end-column 16, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/partition, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 767, :end-line 767, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given"}, t_cljs$core$async19920 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async19920, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 526, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, Mult {:meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 407, :column 14, :end-line 407, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}}, :protocol-symbol true, :name cljs.core.async/Mult, :file "out/dev/cljs/core/async.cljs", :end-column 18, :column 1, :line 407, :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :info nil, :end-line 407, :impls #{cljs.core.async/t_cljs$core$async19259 cljs.core.async/t_cljs$core$async19482}, :doc nil, :jsdoc ("@interface")}, merge {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 702, :column 7, :end-line 702, :end-column 12, :arglists (quote ([chs] [chs buf-or-n])), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([chs] [chs buf-or-n]), :arglists ([chs] [chs buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/merge, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([chs] [chs buf-or-n]), :arglists ([chs] [chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([chs] [chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 702, :end-line 702, :max-fixed-arity 2, :fn-var true, :arglists ([chs] [chs buf-or-n]), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed."}, ->t_cljs$core$async18707 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([filter> p ch meta18708])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18707, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([filter> p ch meta18708]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 241, :max-fixed-arity 4, :fn-var true, :arglists (quote ([filter> p ch meta18708])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, partition-by {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 793, :column 7, :end-line 793, :end-column 19, :arglists (quote ([f ch] [f ch buf-or-n])), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f ch] [f ch buf-or-n]), :arglists ([f ch] [f ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/partition-by, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f ch] [f ch buf-or-n]), :arglists ([f ch] [f ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f ch] [f ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 793, :end-line 793, :max-fixed-arity 3, :fn-var true, :arglists ([f ch] [f ch buf-or-n]), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given"}, unsub-all {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 658, :column 7, :end-line 658, :end-column 16, :arglists (quote ([p] [p topic])), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p topic]), :arglists ([p] [p topic]), :arglists-meta (nil nil)}}, :name cljs.core.async/unsub-all, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p topic]), :arglists ([p] [p topic]), :arglists-meta (nil nil)}, :method-params ([p] [p topic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 658, :end-line 658, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p topic]), :doc "Unsubscribes all channels from a pub, or a topic of a pub"}, >! {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 81, :column 7, :end-line 81, :end-column 9, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available."}, :name cljs.core.async/>!, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 9, :method-params ([port val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available."}, unmix-all* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 477, :column 4, :end-line 477, :end-column 14, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix-all*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 477, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil}, nop {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 79, :column 8, :end-line 79, :end-column 11, :private true, :arglists (quote ([]))}, :private true, :name cljs.core.async/nop, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, split {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 343, :column 7, :end-line 343, :end-column 12, :arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/split, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 4, :fn-var true, :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed."}, unmix-all {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 560, :column 7, :end-line 560, :end-column 16, :arglists (quote ([mix])), :doc "removes all inputs from the mix"}, :name cljs.core.async/unmix-all, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 16, :method-params ([mix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 560, :end-line 560, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mix])), :doc "removes all inputs from the mix"}, filter> {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 236, :column 7, :end-line 236, :end-column 14, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel."}, :name cljs.core.async/filter>, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel."}, tap* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 408, :column 4, :end-line 408, :end-column 8, :protocol cljs.core.async/Mult, :doc nil, :arglists (quote ([m ch close?]))}, :protocol cljs.core.async/Mult, :name cljs.core.async/tap*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 8, :method-params ([m ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 408, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m ch close?])), :doc nil}, untap {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 465, :column 7, :end-line 465, :end-column 12, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult"}, :name cljs.core.async/untap, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :method-params ([mult ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult"}, ->t_cljs$core$async18672 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-handler flag cb meta18673])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18672, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([alt-handler flag cb meta18673]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 131, :max-fixed-arity 4, :fn-var true, :arglists (quote ([alt-handler flag cb meta18673])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-handler {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 130, :column 8, :end-line 130, :end-column 19, :private true, :arglists (quote ([flag cb]))}, :private true, :name cljs.core.async/alt-handler, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 19, :method-params ([flag cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flag cb]))}, alts! {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 164, :column 7, :end-line 164, :end-column 12, :arglists (quote ([ports & {:as opts}])), :doc "Completes at most one of several channel operations. Must be called\n  inside a (go ...) block. ports is a vector of channel endpoints, which\n  can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and nil for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ports {:as opts})], :arglists ([ports & {:as opts}]), :arglists-meta (nil)}}, :name cljs.core.async/alts!, :variadic true, :file "out/dev/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ports {:as opts})], :arglists ([ports & {:as opts}]), :arglists-meta (nil)}, :method-params [(ports {:as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists ([ports & {:as opts}]), :doc "Completes at most one of several channel operations. Must be called\n  inside a (go ...) block. ports is a vector of channel endpoints, which\n  can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and nil for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects."}, ->t_cljs$core$async19920 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta19921])), :file nil}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async19920, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta19921]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 526, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta19921])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async19482 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([mult ch cs meta19483])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async19482, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([mult ch cs meta19483]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 426, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult ch cs meta19483])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unsub {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 653, :column 7, :end-line 653, :end-column 12, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub"}, :name cljs.core.async/unsub, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :method-params ([p topic ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 653, :end-line 653, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub"}, ->t_cljs$core$async18686 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta18687])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18686, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([map< f ch meta18687]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map< f ch meta18687])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map< {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 192, :column 7, :end-line 192, :end-column 11, :arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel"}, :name cljs.core.async/map<, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel"}, fn-handler {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 11, :column 8, :end-line 11, :end-column 18, :private true, :arglists (quote ([f]))}, :private true, :name cljs.core.async/fn-handler, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, do-alts {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 138, :column 7, :end-line 138, :end-column 14, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued"}, :name cljs.core.async/do-alts, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :method-params ([fret ports opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued"}, random-array {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 107, :column 8, :end-line 107, :end-column 20, :private true, :arglists (quote ([n]))}, :private true, :name cljs.core.async/random-array, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, t_cljs$core$async18629 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18629, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, Mix {:meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 474, :column 14, :end-line 474, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}}, :protocol-symbol true, :name cljs.core.async/Mix, :file "out/dev/cljs/core/async.cljs", :end-column 17, :column 1, :line 474, :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :info nil, :end-line 474, :impls #{cljs.core.async/t_cljs$core$async19920 cljs.core.async/t_cljs$core$async19767}, :doc nil, :jsdoc ("@interface")}, ->t_cljs$core$async19259 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([mult ch cs meta19260])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async19259, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([mult ch cs meta19260]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 426, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult ch cs meta19260])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, toggle* {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 478, :column 4, :end-line 478, :end-column 11, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m state-map]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/toggle*, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :method-params ([m state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 478, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m state-map])), :doc nil}, mult {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 412, :column 7, :end-line 412, :end-column 11, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap put throws an exception, it will be removed from the mult."}, :name cljs.core.async/mult, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap put throws an exception, it will be removed from the mult."}, ->t_cljs$core$async18695 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta18693 _ fn1 meta18696])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async18695, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([map< f ch meta18693 _ fn1 meta18696]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 205, :max-fixed-arity 7, :fn-var true, :arglists (quote ([map< f ch meta18693 _ fn1 meta18696])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async20129 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([ch topic-fn buf-fn mults ensure-mult meta20130])), :file nil}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async20129, :variadic false, :file "out/dev/cljs/core/async.cljs", :method-params ([ch topic-fn buf-fn mults ensure-mult meta20130]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 14, :factory :positional, :line 617, :max-fixed-arity 6, :fn-var true, :arglists (quote ([ch topic-fn buf-fn mults ensure-mult meta20130])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat< {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 298, :column 7, :end-line 298, :end-column 14, :arglists (quote ([f in] [f in buf-or-n])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f in] [f in buf-or-n]), :arglists ([f in] [f in buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/mapcat<, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f in] [f in buf-or-n]), :arglists ([f in] [f in buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f in] [f in buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 3, :fn-var true, :arglists ([f in] [f in buf-or-n]), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes."}, t_cljs$core$async18686 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async18686, :file "out/dev/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 197, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unblocking-buffer? {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 35, :column 7, :end-line 35, :end-column 25, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. "}, :name cljs.core.async/unblocking-buffer?, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 25, :method-params ([buff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. "}, put! {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 87, :column 7, :end-line 87, :end-column 11, :arglists (quote ([port val] [port val fn0] [port val fn0 on-caller?])), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists-meta (nil nil nil)}}, :name cljs.core.async/put!, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists-meta (nil nil nil)}, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists ([port val] [port val fn0] [port val fn0 on-caller?]), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil."}, take! {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async.cljs", :line 64, :column 7, :end-line 64, :end-column 12, :arglists (quote ([port fn1] [port fn1 on-caller?])), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([port fn1] [port fn1 on-caller?]), :arglists ([port fn1] [port fn1 on-caller?]), :arglists-meta (nil nil)}}, :name cljs.core.async/take!, :variadic false, :file "out/dev/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([port fn1] [port fn1 on-caller?]), :arglists ([port fn1] [port fn1 on-caller?]), :arglists-meta (nil nil)}, :method-params ([port fn1] [port fn1 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists ([port fn1] [port fn1 on-caller?]), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{meta18667 change meta19768 mix p :mutes meta18696 :solo :cljs.core.async/nothing meta20130 :private :else meta18633 :default cb meta18670 buf-fn meta18673 solo-mode meta18699 meta18708 mults fn1 :recur meta19921 meta19483 _ alt-flag map> pick flag ensure-mult meta18705 cs cljs.core.async/t_cljs$core$async18692 mode :priority :solos meta18630 meta18702 ch cljs.core.async/t_cljs$core$async18686 meta18690 calc-state :pause topic-fn meta18664 :tag filter> quote alt-handler :arglists out map< fn-handler :doc changed solo-modes mult meta18687 meta18693 :mute attrs meta19260 :reads f}, :order [fn-handler :private :arglists quote f meta18630 meta18633 alt-flag flag meta18664 meta18667 alt-handler cb meta18670 meta18673 :priority :default map< :doc ch meta18687 _ :tag cljs.core.async/t_cljs$core$async18686 fn1 meta18690 meta18693 cljs.core.async/t_cljs$core$async18692 meta18696 map> meta18699 meta18702 filter> p meta18705 meta18708 :recur :else mult cs meta19260 meta19483 :pause :mute :solo :solos :mutes :reads solo-modes mode change mix out solo-mode pick calc-state changed attrs meta19768 meta19921 topic-fn buf-fn mults ensure-mult meta20130 :cljs.core.async/nothing]}, :doc nil}