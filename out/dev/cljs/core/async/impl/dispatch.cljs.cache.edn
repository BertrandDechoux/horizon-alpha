;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name cljs.core.async.impl.dispatch, :imports nil, :requires {buffers cljs.core.async.impl.buffers, cljs.core.async.impl.buffers cljs.core.async.impl.buffers}, :uses nil, :defs {message-channel {:name cljs.core.async.impl.dispatch/message-channel, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :line 4, :column 1, :end-line 4, :end-column 21, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 4, :column 6, :end-line 4, :end-column 21}}, tasks {:name cljs.core.async.impl.dispatch/tasks, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 5, :column 6, :end-line 5, :end-column 11}}, running? {:name cljs.core.async.impl.dispatch/running?, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :line 6, :column 1, :end-line 6, :end-column 24, :boolean true, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 6, :column 16, :end-line 6, :end-column 24, :boolean true}}, queued? {:name cljs.core.async.impl.dispatch/queued?, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :line 7, :column 1, :end-line 7, :end-column 23, :boolean true, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 7, :column 16, :end-line 7, :end-column 23, :boolean true}}, TASK_BATCH_SIZE {:name cljs.core.async.impl.dispatch/TASK_BATCH_SIZE, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :line 9, :column 1, :end-line 9, :end-column 21, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 9, :column 6, :end-line 9, :end-column 21}}, queue-dispatcher {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 32, :column 7, :end-line 32, :end-column 23, :arglists (quote ([]))}, :name cljs.core.async.impl.dispatch/queue-dispatcher, :variadic false, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, process-messages {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 13, :column 7, :end-line 13, :end-column 23, :arglists (quote ([]))}, :name cljs.core.async.impl.dispatch/process-messages, :variadic false, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 41, :column 7, :end-line 41, :end-column 10, :arglists (quote ([f]))}, :name cljs.core.async.impl.dispatch/run, :variadic false, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :end-column 10, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, queue-delay {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/dispatch.cljs", :line 45, :column 7, :end-line 45, :end-column 18, :arglists (quote ([f delay]))}, :name cljs.core.async.impl.dispatch/queue-delay, :variadic false, :file "out/dev/cljs/core/async/impl/dispatch.cljs", :end-column 18, :method-params ([f delay]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f delay]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}