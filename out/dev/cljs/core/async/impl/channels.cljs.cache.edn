;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name cljs.core.async.impl.channels, :imports nil, :requires {impl cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.buffers cljs.core.async.impl.buffers}, :uses nil, :defs {put-active? {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/channels.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([box]))}, :name cljs.core.async.impl.channels/put-active?, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 18, :method-params ([box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([box]))}, chan {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/channels.cljs", :line 110, :column 7, :end-line 110, :end-column 11, :arglists (quote ([buf]))}, :name cljs.core.async.impl.channels/chan, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 11, :method-params ([buf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buf]))}, ->t_cljs$core$async$impl$channels20912 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([box val meta20913])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels20912, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :method-params ([box val meta20913]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([box val meta20913])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->t_cljs$core$async$impl$channels20909 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([box val meta20910])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels20909, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :method-params ([box val meta20910]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([box val meta20910])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, t_cljs$core$async$impl$channels20909 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t_cljs$core$async$impl$channels20909, :file "out/dev/cljs/core/async/impl/channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, box {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/channels.cljs", :line 16, :column 7, :end-line 16, :end-column 10, :arglists (quote ([val]))}, :name cljs.core.async.impl.channels/box, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 10, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, ->PutBox {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/channels.cljs", :line 20, :column 10, :end-line 20, :end-column 16, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([handler val]))}, :protocols #{}, :name cljs.core.async.impl.channels/->PutBox, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 16, :method-params ([handler val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler val])), :skip-protocol-flag nil}, t_cljs$core$async$impl$channels20912 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t_cljs$core$async$impl$channels20912, :file "out/dev/cljs/core/async/impl/channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, MAX_DIRTY {:name cljs.core.async.impl.channels/MAX_DIRTY, :file "out/dev/cljs/core/async/impl/channels.cljs", :line 25, :column 1, :end-line 25, :end-column 23, :const true, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/channels.cljs", :line 25, :column 14, :end-line 25, :end-column 23, :const true}}, ManyToManyChannel {:num-fields 6, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/ManyToManyChannel, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 27, :type true, :column 10, :line 27, :record false, :end-line 27, :skip-protocol-flag nil}, ->ManyToManyChannel {:protocol-inline nil, :meta {:file "/Users/bertranddechoux/Documents/sources/horizon-alpha/out/dev/cljs/core/async/impl/channels.cljs", :line 27, :column 10, :end-line 27, :end-column 27, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed]))}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/->ManyToManyChannel, :variadic false, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 27, :method-params ([takes dirty-takes puts dirty-puts buf closed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 27, :end-line 27, :max-fixed-arity 6, :fn-var true, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed])), :skip-protocol-flag nil}, PutBox {:num-fields 2, :protocols #{}, :name cljs.core.async.impl.channels/PutBox, :file "out/dev/cljs/core/async/impl/channels.cljs", :end-column 16, :type true, :column 10, :line 20, :record false, :end-line 20, :skip-protocol-flag nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{.-length puts handler < closed buf meta20910 box nil? not-native val not meta20913 :tag :mutable quote dirty-takes :arglists dirty-puts takes impl/MAX-QUEUE-SIZE}, :order [box :arglists quote val meta20910 meta20913 handler not nil? < .-length puts impl/MAX-QUEUE-SIZE takes dirty-takes :mutable dirty-puts buf :tag not-native closed]}, :doc nil}